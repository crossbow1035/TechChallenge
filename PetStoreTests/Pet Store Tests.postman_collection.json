{
	"info": {
		"_postman_id": "f9b0fff8-3a72-42d4-99d4-7c187724544d",
		"name": "Pet Store Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14495535"
	},
	"item": [
		{
			"name": "Available pets",
			"item": [
				{
					"name": "AvailablePetsByStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*FEATURE: get all pets information",
									"SCENARIO: we request all pets by status",
									"GIVEN we include in the request available status",
									"WHEN we send the request",
									"THEN we get all available pets */",
									"",
									"/*Test the response status is OK */",
									"pm.test(\"Status is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"/*Test the response has all properties*/",
									"pm.test(\"Response has all propierties\", function () {",
									"    var json = pm.response.json();",
									"    ",
									"    pm.expect(Array.isArray(json)).to.be.true;",
									"    pm.expect(json.length).to.be.above(0);",
									"",
									"    for (let i=0; i<json.lengh; i++) {",
									"         var pet = json[i];",
									"",
									"    pm.expect(pet.hasOwnProperty(\"id\")).to.be.true;",
									"    pm.expect(pet.hasOwnProperty(\"category\")).to.be.true;",
									"    pm.expect(pet.hasOwnProperty(\"name\")).to.be.true;",
									"    pm.expect(pet.hasOwnProperty(\"photoUrls\")).to.be.true;",
									"    pm.expect(pet.hasOwnProperty(\"tags\")).to.be.true;",
									"    pm.expect(pet.hasOwnProperty(\"status\")).to.be.true;",
									"",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/pet/findByStatus?status=available",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "available"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "New Pet",
			"item": [
				{
					"name": "New Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*FEATURE: Add new pet",
									"SCENARIO: we add new pet with all properties",
									"GIVEN we include in the request valid values for each property",
									"WHEN we send the request",
									"THEN new pet is created with id and name */",
									"",
									"/*Test the response status is OK */",
									"pm.test(\"Status is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Pet successful. created with name Tara\", function() {",
									"    var json = pm.response.json();",
									"",
									"      pm.expect(json.hasOwnProperty(\"id\")).to.be.true;",
									"      pm.expect(json.hasOwnProperty(\"name\")).to.be.true;",
									"      pm.expect(json.name).to.be.eql(\"Tara\");",
									"",
									"});",
									"",
									"/*Set variables*/",
									"var json = pm.response.json();",
									"pm.environment.set(\"id\", json.id);",
									"pm.environment.set(\"status\", json.status);",
									"pm.environment.set(\"category\", json.category.name);",
									"pm.environment.set(\"name\", json.name);",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{$randomInt}},\n  \"category\": {\n    \"id\": {{$randomInt}},\n    \"name\": \"{{$randomWord}}\"\n  },\n  \"name\": \"Tara\",\n  \"photoUrls\": [\n    \"{{$randomAnimalsImage}}\"\n  ],\n  \"tags\": [\n    {\n      \"id\": {{$randomInt}},\n      \"name\": \"{{$randomWord}}\"\n    }\n  ],\n  \"status\": \"available\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/pet",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "AvailablePetsById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*FEATURE: Add new pet",
									"SCENARIO: we get all data of the new pet",
									"GIVEN we include in the request the id of the new pet",
									"WHEN we send the request",
									"THEN we get all data of the new pet*/",
									"",
									"/*Test the response status is OK */",
									"pm.test(\"Status is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var json = pm.response.json();",
									"var id = pm.environment.get(\"id\");",
									"var status = pm.environment.get(\"status\");",
									"var category = pm.environment.get(\"category\");",
									"var name = pm.environment.get(\"name\");",
									"",
									"/*Test all properties are correct */",
									"pm.test(\"All properties are correct\", function () {",
									"    pm.expect(json.id).to.eql(id);",
									"    pm.expect(json.category.name).to.eql(category);",
									"    pm.expect(json.name).to.eql(name);",
									"    pm.expect(json.photoUrls.length).to.eql(1);",
									"    pm.expect(json.tags.length).to.eql(1);",
									"    pm.expect(json.status).to.eql(status);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/pet/{{id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pet",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update to Sold",
			"item": [
				{
					"name": "UpdateToSold",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*FEATURE: Update pet",
									"SCENARIO: Update pet status",
									"GIVEN we include in the request \"Sold\" as status",
									"WHEN we send the request",
									"THEN new pet is updated with status sold */",
									"",
									"/*Test the response status is OK */",
									"pm.test(\"Status is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var json = pm.response.json();",
									"",
									"pm.test(\"Status is sold\", function () {",
									"    pm.expect(json.status).to.eql(\"sold\");",
									"});",
									"",
									"/*Set variables*/",
									"pm.environment.set(\"id\", json.id);",
									"pm.environment.set(\"status\", json.status);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{id}},\n    \"status\": \"sold\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/pet",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "AvailablePetsById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*FEATURE: Update pet",
									"SCENARIO: we get correct status of the updated pet",
									"GIVEN we include in the request the id of the updated pet",
									"WHEN we send the request",
									"THEN we get expected status*/",
									"",
									"/*Test the response status is OK */",
									"pm.test(\"Status is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var json = pm.response.json();",
									"var id = pm.environment.get(\"id\");",
									"var status = pm.environment.get(\"status\");",
									"",
									"/*Test status is the updated one */",
									"pm.test(\"Status is sold\", function () {",
									"    pm.expect(json.status).to.eql(\"sold\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/pet/{{id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pet",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Pet",
			"item": [
				{
					"name": "DeleteById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*FEATURE: Delete pet",
									"SCENARIO: we delete pet by id",
									"GIVEN we include in the request a valid id",
									"WHEN we send the request",
									"THEN we get status is ok and delete operation is complete*/",
									"",
									"/*Test the response status is OK */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/pet/{{id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pet",
								"{{id}}"
							],
							"query": [
								{
									"key": "api_key",
									"value": "",
									"disabled": true
								},
								{
									"key": "id",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AvailablePetsById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*FEATURE: Delete pet",
									"SCENARIO: we don't get the deleted pet by id",
									"GIVEN we include in the request the id of the deleted pet",
									"WHEN we send the request",
									"THEN we don't get the deleted pet*/",
									"",
									"/*Test the response status is OK */",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"/*Test we don't get the deleted pet*/",
									"pm.test(\"Deleted pet is not found\", function () {",
									"   var json = pm.response.json();",
									"   ",
									"   pm.expect(json.message).to.eql(\"Pet not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/pet/{{id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pet",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}